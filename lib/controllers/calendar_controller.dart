import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../models/event.dart';

class CalendarController extends GetxController {
  final _selectedDate = DateTime.now().obs; 
  final _events = <CalendarEvent>[].obs;
  final _isAddingEvent = false.obs; // To track if the add event dialog is open

  DateTime get selectedDate => _selectedDate.value;
  List<CalendarEvent> get events => _events;
  bool get isAddingEvent => _isAddingEvent.value; 

  @override
  void onInit() {
    super.onInit();
    fetchEvents();
  }

  void onDayTapped(DateTime date) {
    _selectedDate.value = date;
    if (!_isAddingEvent.value) { 
       _showAddEventDialog(context: Get.context!, selectedDate: date);
    }
  }

  Future<void> fetchEvents() async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection('events') 
          .get();
      _events.assignAll(snapshot.docs.map((doc) =>
          CalendarEvent.fromMap(doc.id, doc.data())).toList());
    } catch (e) {
      Get.snackbar('Error', 'Failed to load events');
      print("Error fetching events: $e"); 
    }
  }

  Future<void> addEvent(CalendarEvent event) async {
    try {
      await FirebaseFirestore.instance.collection('events').add(event.toMap());
      _events.add(event); 
      Get.back(); // Close the dialog
    } catch (e) {
      Get.snackbar('Error', 'Failed to add event');
      print("Error adding event: $e");
    }
  }

  Future<void> updateEvent(CalendarEvent event) async {
    try {
      await FirebaseFirestore.instance
          .collection('events')
          .doc(event.id) 
          .update(event.toMap());

      final index = _events.indexWhere((e) => e.id == event.id);
      if (index != -1) {
        _events[index] = event;
      }

      Get.back();
    } catch (e) {
      Get.snackbar('Error', 'Failed to update event');
      print("Error updating event: $e");
    }
  }

  Future<void> deleteEvent(String eventId) async {
    try {
      await FirebaseFirestore.instance
          .collection('events')
          .doc(eventId)
          .delete();

      _events.removeWhere((e) => e.id == eventId);
    } catch (e) {
      Get.snackbar('Error', 'Failed to delete event');
      print("Error deleting event: $e");
    }
  }
  
  // Shows a dialog to add events
  void _showAddEventDialog({required BuildContext context, required DateTime selectedDate}) {
    final _formKey = GlobalKey<FormState>();
    String _eventName = '';
    Color _eventColor = Colors.blue; // Default event color

    Get.dialog(
      AlertDialog(
        title: const Text('Add Event'),
        content: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                decoration: const InputDecoration(labelText: 'Event Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an event name';
                  }
                  return null;
                },
                onSaved: (value) => _eventName = value!,
              ),
              const SizedBox(height: 16),
              // Color Picker (You'll need to implement this or use a package)
              // Example using a DropdownButton:
              DropdownButtonFormField<Color>(
                value: _eventColor,
                decoration: const InputDecoration(labelText: 'Event Color'),
                items: [
                  DropdownMenuItem(
                    value: Colors.blue,
                    child: const Text('Blue'),
                  ),
                  DropdownMenuItem(
                    value: Colors.red,
                    child: const Text('Red'),
                  ),
                  // Add more colors as needed
                ],
                onChanged: (color) => _eventColor = color!,
              ),
              // ... (Add more fields for event details as needed) ...
            ],
          ),
        ),
        actions: <Widget>[
          TextButton(
            child: const Text('Cancel'),
            onPressed: () {
              Get.back();
              _isAddingEvent.value = false; // Dialog closed
            },
          ),
          TextButton(
            child: const Text('Save'),
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                _formKey.currentState!.save();
                addEvent(CalendarEvent(
                  id: '', // ID will be generated by Firestore
                  eventName: _eventName,
                  eventDate: selectedDate, 
                  eventBackgroundColor: _eventColor,
                ));
                _isAddingEvent.value = false; // Dialog closed
              }
            },
          )
        ],
      ),
    ).then((_) => _isAddingEvent.value = false); // Dialog closed
    _isAddingEvent.value = true; // Dialog opened 
  }
  
}